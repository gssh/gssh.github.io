{"name":"Global-ssh","tagline":"global-ssh project","body":"### Welcome to Global-SSH developer Pages.\r\nGlobal-SSH, application help connect SSH to computer via p2p network, use hole punching create TCP connect and use for SSH:\r\n\r\n```\r\n$ cd global-ssh/client\r\n$ python cl_main.py\r\nto show all peer client:\r\n$ -l\r\nto connect to peer:\r\n$ -c {number of peer}\r\n```\r\n\r\n### About project\r\nThis project will build a application tool to connect linux computer behind NAT use hole punching and multi hole punching for symmetric NAT.\r\n\r\n### About hole punching with clone NAT\r\n![hole punching](http://www.brynosaurus.com/pub/net/p2pnat/img6.png)\r\n\r\nHole punching assumes that the two clients, A and B, already have active TCP sessions with a rendezvous server S. When a client registers with S, the server records two endpoints for that client: the (IP address, port) pair that the client believes itself to be using to talk with S, and the (IP address, port) pair that the server observes the client to be using to talk with it. We refer to the first pair as the client's private endpoint and the second as the client's public endpoint. The server might obtain the client's private endpoint from the client itself in a field in the body of the client's registration message, and obtain the client's public endpoint from the source IP address and source port fields in the IP and TCP headers of that registration message. If the client is not behind a NAT, then its private and public endpoints should be identical.\r\n\r\nview more at http://www.brynosaurus.com/pub/net/p2pnat/\r\n\r\n### Symmetric NAT\r\nIn a symmetric NAT, any request from an internal IP address and a port number to some destination IP address and\r\nport number is mapped to a unique external IP address and a unique port number. If the same host sends a packet from the same source address and the same port number but to a different destination, a different mapping is used. Only the external host that receives a packet from an internal host can send a TCP packet back to the internal host.\r\n### Multi hole punching\r\n![multi hole punching](http://i.imgur.com/mxOqb95.png)\r\n\r\nthe client is known as an echo client and the server is known as an echo server because there are a series of packet exchanges between them. An echo client communicates with two servers S1 and S2. S1 and S2 record the IP address and port number of the echo client, and these are then translated by NAT a. The following are the steps of the method:\r\n\r\nF1: The echo client communicates with S1. Then, S1 analyzes the port number mapped by NAT a.\r\n\r\nF2: S1 conveys the port number to the echo client.\r\n\r\nF3: The echo client sends a packet to S2. It includes information obtained on the port number of NAT a when\r\nthe echo client communicated with S1. Then, S2 analyzes the port number of NAT a and records it. Furthermore, S2 also records the information obtained on the port number of NAT a when the echo client communicated with S1 at step F1.\r\n\r\nF4: The echo server communicates with S1. Then, S1 analyzes the port number mapped by NAT b.\r\n\r\nF5: S1 conveys the port number to the echo server.\r\n\r\nF6: The echo server sends a packet to S2. The packet includes the port number information of NAT b obtained\r\nfrom the communication of the echo server with S1 at step F4. Then, S2 analyzes the port number of NAT\r\nb and records it. Furthermore, S2 records the port number information of NAT b obtained when the echo server communicated with S1 at step F4.\r\n\r\nF7: Based on the two types of information communicated in phases I and II, namely the communications of NAT\r\na with S1 and S2, we can predict a suitable port number for hole punching. We can also determine the\r\npunching mode. S2 sends the information containing the predicted port number and the punching mode to\r\nthe echo server.\r\n\r\nF8: Based on this information, the echo server sends a large number of packets. These packets have a fixed destination port and a low TTL value. The echo server binds the port. The packets are then sent to the echo client.\r\n\r\nF9: Using the two kinds of information obtained in phases I and II, namely, the communications of NAT b with S1\r\nand S2, we can predict a suitable port number for the hole punching. S2 sends the information that contains\r\nthe predicted port number and the punching mode to the echo client in a manner similar to that of step F7.\r\n\r\nF10: On the basis of the information obtained in step F9,the echo client sends many packets to the echo server.\r\nThese packets have a fixed destination port. The echo client binds the port. After sending all the packets,\r\nthe echo client switches to the receiving mode.\r\n\r\nF11: The echo server replies to the echo client. It establishes a P2P connection between the echo client and the echo server at this stage.\r\n\r\nView more at A New Method for Symmetric NAT Traversal in UDP and TCP.\r\n\r\nhttp://www.goto.info.waseda.ac.jp/~wei/file/wei-apan-v10.pdf\r\n\r\n***\r\n### Authors\r\nMy team are Hiep and Dinh at IT in Industrial University of Ho Chi Minh City - IUH.\r\n\r\n### Support or Contact\r\nHaving trouble with app? Check out the documentation at:\r\n\r\nhttp://github.com/nthiep/global-ssh\r\n\r\nor contact hiep.iuh@gmail.com and weâ€™ll help you sort it out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}